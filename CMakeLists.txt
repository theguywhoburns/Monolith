cmake_minimum_required(VERSION 3.22)
set(MONOLITH_VERSION_MAJOR 0)
set(MONOLITH_VERSION_MINOR 0)
set(MONOLITH_VERSION_PATCH 1)
project(
    monolith
    VERSION ${MONOLITH_VERSION_MAJOR}.${MONOLITH_VERSION_MINOR}.${MONOLITH_VERSION_PATCH}
    LANGUAGES C
)

add_compile_options(-nostartfiles -nodefaultlibs -nostdlib -nostdinc -Wl,--no-as-needed)
add_link_options(-Wl,--no-as-needed -nostartfiles -nodefaultlibs -nostdlib -nostdinc)

enable_language(ASM_NASM) # TODO: Cross compiling for different architectures
file(GLOB_RECURSE MONOLITH_SOURCES CONFIGURE_DEPENDS "src/*.c")
add_library(${PROJECT_NAME} SHARED ${MONOLITH_SOURCES})
target_include_directories(${PROJECT_NAME} PUBLIC include)
set_target_properties(${PROJECT_NAME} PROPERTIES C_STANDARD 17)
set_target_properties(${PROJECT_NAME} PROPERTIES C_STANDARD_REQUIRED ON)

if(MSVC)
    set(MONOLITH_COMPILER "MSVC")
elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
    set(MONOLITH_COMPILER "CLANG")
elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(MONOLITH_COMPILER "GCC")
else()
    message(FATAL_ERROR "Unsupported compiler: ${CMAKE_C_COMPILER_ID}")
endif()

# arch detection
if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
    set(MONOLITH_ARCH "X86_64")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64")
    set(MONOLITH_ARCH "X86_64")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i386")
    set(MONOLITH_ARCH "I386")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i686")
    set(MONOLITH_ARCH "I686")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
    set(MONOLITH_ARCH "ARM")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
    set(MONOLITH_ARCH "ARM")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64le")
    set(MONOLITH_ARCH "POWERPC")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
    set(MONOLITH_ARCH "POWERPC")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
    set(MONOLITH_ARCH "S390X")
else()
    message(FATAL_ERROR "Unsupported architecture")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(MONOLITH_PLATFORM "WINDOWS")
    file(GLOB_RECURSE MONOLITH_ASSEMBLY_SOURCES CONFIGURE_DEPENDS "src/platform/windows/*.asm")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(MONOLITH_PLATFORM "LINUX")
    file(GLOB_RECURSE MONOLITH_ASSEMBLY_SOURCES CONFIGURE_DEPENDS "src/platform/linux/*.asm")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(MONOLITH_PLATFORM "MACOS")
    file(GLOB_RECURSE MONOLITH_ASSEMBLY_SOURCES CONFIGURE_DEPENDS "src/platform/macos/*.asm")
    string(APPEND CMAKE_ASM_NASM_FLAGS " --prefix _")
elseif(CMAKE_SYSTEM_NAME MATCHES "Unix")
    file(GLOB_RECURSE MONOLITH_ASSEMBLY_SOURCES CONFIGURE_DEPENDS "src/platform/linux/*.asm")
    set(MONOLITH_PLATFORM "LINUX")
else()
    message(FATAL_ERROR "Unsupported platform")
endif()
string(APPEND CMAKE_ASM_NASM_FLAGS " -dMONOLITH_PLATFORM_${MONOLITH_PLATFORM} -dMONOLITH_ARCH_${MONOLITH_ARCH}")

target_sources(${PROJECT_NAME} PRIVATE ${MONOLITH_ASSEMBLY_SOURCES})
target_compile_definitions(${PROJECT_NAME} PRIVATE MONOLITH_EXPORTS)
add_compile_definitions(
        MONOLITH_COMPILER="${MONOLITH_COMPILER}"
        MONOLITH_PLATFORM="${MONOLITH_PLATFORM}"
        MONOLITH_ARCH="${MONOLITH_ARCH}"
        MONOLITH_COMPILER_${MONOLITH_COMPILER}
        MONOLITH_PLATFORM_${MONOLITH_PLATFORM}
        MONOLITH_ARCH_${MONOLITH_ARCH}
        MONOLITH_VERSION_MAJOR=${MONOLITH_VERSION_MAJOR}
        MONOLITH_VERSION_MINOR=${MONOLITH_VERSION_MINOR}
        MONOLITH_VERSION_PATCH=${MONOLITH_VERSION_PATCH}
        MONOLITH_VERSION_STR="${MONOLITH_VERSION_MAJOR}.${MONOLITH_VERSION_MINOR}.${MONOLITH_VERSION_PATCH}"
)

add_subdirectory(tests)